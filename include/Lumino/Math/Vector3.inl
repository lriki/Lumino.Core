
LN_NAMESPACE_BEGIN

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3::Vector3()
{
	x = y = z = 0.0f;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3::Vector3(float x_, float y_, float z_)
{
	x = x_;
	y = y_;
	z = z_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline void Vector3::Set(float x_, float y_, float z_)
{
	x = x_;
	y = y_;
	z = z_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline const Vector2& Vector3::GetXY() const
{
	return *reinterpret_cast<const Vector2*>(this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline float Vector3::GetLengthSquared() const
{
	return x * x + y * y + z * z;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator += (const Vector3& v)
{
	x += v.x;
	y += v.y;
	z += v.z;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator += (float v)
{
	x += v;
	y += v;
	z += v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator -= (const Vector3& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator -= (float v)
{
	x -= v;
	y -= v;
	z -= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator *= (const Vector3& v)
{
	x *= v.x;
	y *= v.y;
	z *= v.z;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator *= (float v)
{
	x *= v;
	y *= v;
	z *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator /= (const Vector3& v)
{
	x /= v.x;
	y /= v.y;
	z /= v.z;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3& Vector3::operator /= (float v)
{
	v = 1.0f / v;
	x *= v;
	y *= v;
	z *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator + (const Vector3& v1, const Vector3& v2)
{
	return Vector3(
		v1.x + v2.x,
		v1.y + v2.y,
		v1.z + v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator + (const Vector3& v1, float v2)
{
	return Vector3(
		v1.x + v2,
		v1.y + v2,
		v1.z + v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator + (float v1, const Vector3& v2)
{
	return Vector3(
		v1 + v2.x,
		v1 + v2.y,
		v1 + v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator - (const Vector3& v1, const Vector3& v2)
{
	return Vector3(
		v1.x - v2.x,
		v1.y - v2.y,
		v1.z - v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator - (const Vector3& v1, float v2)
{
	return Vector3(
		v1.x - v2,
		v1.y - v2,
		v1.z - v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator - (float v1, const Vector3& v2)
{
	return Vector3(
		v1 - v2.x,
		v1 - v2.y,
		v1 - v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator * (const Vector3& v1, const Vector3& v2)
{
	return Vector3(
		v1.x * v2.x,
		v1.y * v2.y,
		v1.z * v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator * (const Vector3& v1, float v2)
{
	return Vector3(
		v1.x * v2,
		v1.y * v2,
		v1.z * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator * (float v1, const Vector3& v2)
{
	return Vector3(
		v1 * v2.x,
		v1 * v2.y,
		v1 * v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator / (const Vector3& v1, const Vector3& v2)
{
	return Vector3(
		v1.x / v2.x,
		v1.y / v2.y,
		v1.z / v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator / (const Vector3& v1, float v2)
{
	v2 = 1.0f / v2;
	return Vector3(
		v1.x * v2,
		v1.y * v2,
		v1.z * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator / (float v1, const Vector3& v2)
{
	return Vector3(
		v1 / v2.x,
		v1 / v2.y,
		v1 / v2.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector3 operator - (const Vector3& v1)
{
	return Vector3(
		-v1.x,
		-v1.y,
		-v1.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector3::operator == (const Vector3& v) const
{
	return (x == v.x && y == v.y && z == v.z);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector3::operator != (const Vector3& v) const
{
	return (x != v.x || y != v.y || z != v.z);
}

LN_NAMESPACE_END
