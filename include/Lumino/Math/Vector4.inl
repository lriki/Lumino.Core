
LN_NAMESPACE_BEGIN

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4::Vector4()
{
	x = y = z = w = 0.0f;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4::Vector4(float x_, float y_, float z_, float w_)
{
	x = x_;
	y = y_;
	z = z_;
    w = w_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline void Vector4::Set(float x_, float y_, float z_, float w_)
{
	x = x_;
	y = y_;
	z = z_;
    w = w_;
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline const Vector2& Vector4::GetXY() const
{
	return *reinterpret_cast<const Vector2*>(this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline const Vector3& Vector4::GetXYZ() const
{
	return *reinterpret_cast<const Vector3*>(this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator += (const Vector4& v)
{
	x += v.x;
	y += v.y;
	z += v.z;
	w += v.w;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator += (float v)
{
	x += v;
	y += v;
	z += v;
	w += v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator -= (const Vector4& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	w -= v.w;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator -= (float v)
{
	x -= v;
	y -= v;
	z -= v;
	w -= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator *= (const Vector4& v)
{
	x *= v.x;
	y *= v.y;
	z *= v.z;
	w *= v.w;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator *= (float v)
{
	x *= v;
	y *= v;
	z *= v;
	w *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator /= (const Vector4& v)
{
	x /= v.x;
	y /= v.y;
	z /= v.z;
	w /= v.w;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4& Vector4::operator /= (float v)
{
	v = 1.0f / v;
	x *= v;
	y *= v;
	z *= v;
	w *= v;
	return (*this);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.x + v2.x,
		v1.y + v2.y,
		v1.z + v2.z,
		v1.w + v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (const Vector4& v1, float v2)
{
	return Vector4(
		v1.x + v2,
		v1.y + v2,
		v1.z + v2,
		v1.w + v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator + (float v1, const Vector4& v2)
{
	return Vector4(
		v1 + v2.x,
		v1 + v2.y,
		v1 + v2.z,
		v1 + v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.x - v2.x,
		v1.y - v2.y,
		v1.z - v2.z,
		v1.w - v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1, float v2)
{
	return Vector4(
		v1.x - v2,
		v1.y - v2,
		v1.z - v2,
		v1.w - v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (float v1, const Vector4& v2)
{
	return Vector4(
		v1 - v2.x,
		v1 - v2.y,
		v1 - v2.z,
		v1 - v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.x * v2.x,
		v1.y * v2.y,
		v1.z * v2.z,
		v1.w * v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (const Vector4& v1, float v2)
{
	return Vector4(
		v1.x * v2,
		v1.y * v2,
		v1.z * v2,
		v1.w * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator * (float v1, const Vector4& v2)
{
	return Vector4(
		v1 * v2.x,
		v1 * v2.y,
		v1 * v2.z,
		v1 * v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (const Vector4& v1, const Vector4& v2)
{
	return Vector4(
		v1.x / v2.x,
		v1.y / v2.y,
		v1.z / v2.z,
		v1.w / v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (const Vector4& v1, float v2)
{
	v2 = 1.0f / v2;
	return Vector4(
		v1.x * v2,
		v1.y * v2,
		v1.z * v2,
		v1.w * v2);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator / (float v1, const Vector4& v2)
{
	return Vector4(
		v1 / v2.x,
		v1 / v2.y,
		v1 / v2.z,
		v1 / v2.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline Vector4 operator - (const Vector4& v1)
{
	return Vector4(
		-v1.x,
		-v1.y,
		-v1.z,
		-v1.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector4::operator == (const Vector4& v) const
{
	return (x == v.x && y == v.y && z == v.z && w == v.w);
}

//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
inline bool Vector4::operator != (const Vector4& v) const
{
	return (x != v.x || y != v.y || z != v.z || w != v.w);
}

LN_NAMESPACE_END
