
/*
	■[2015/2/6] メッセージループの別スレッド化について
		・別スレッドで動かす場合
			- ウィンドウドラッグ中等もゲーム処理続行可能。
			  システムの都合でメインスレッドを極力中断しなくて良い。
			- イベントハンドラはメインスレッドで実行する。そのため、戻り値を返すことができない。
			  例えば、Closing をコールバック形式で処理できない。
			  普通のGUIアプリだったら OnClosing で handled = true を返してクローズをキャンセルできたりするけど、
			  これは不可能である。
			  ゲーム用途として、ゲーム内GUIでクローズ確認するならいいんだけど。
		・メインスレッドで動かす場合
			- 普通の GUI アプリとして自然な動作。実装もシンプルになる。
			- ゲーム用途としてはあまりメリット無い。ゲーム内GUIでクローズ確認するならどのみち一度 Closing を Post しなければならない。




	■メッセージ処理手順について

		システムから通知されたメッセージは、一度ライブラリのイベントに変換したうえで "Post" する。
		つまり、メインスレッドと同じスレッドで通知されたイベントだとしても一度ライブラリのイベントキューを通す。
		このイベントキューはスレッドセーフにする
		なぜこうするかというと、
		・Win32 環境で別スレッドでメッセージ処理を行うことで、ウィンドウドラッグ中もメインスレッドで処理を行えるようにする。
		・Android 等、既に出来上がっているフレームワークに組み込む場合、メインループを記述することが困難になる場合がある。
		  その場合はゲームスレッドを起動してそこにメインループを記述するが、イベント発生元と処理が別のスレッドになることになる。

		問題はマルチスレッド関係なので、シングルスレッドで動作させるなら "Send" でもOK。
		  
		
*/





